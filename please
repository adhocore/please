#!/usr/bin/env bash
#
# Simple github release for PHP projects.
# 
# Author:
#   Jitendra Adhikari <jiten.adhikary@gmail.com>
#
# Be sure to check readme doc at https://github.com/adhocore/please
#

set -e

line() { echo -e "\e[${3:-0};$2m$1\e[0m"; }

error() { line "$1" 31; }

ok() { line "${1:-  Done}" 32; }

info() { line "$1" 33; }

comment() { line "$1" 30 1; }

qgit() { git "$@" &>> $TMP_LOG; }

github()
{
  RESP=`bash -c "curl --silent -H 'Authorization: token ${GH_AUTH_TOKEN}' $@"`
  echo "$RESP" >> ${TMP_LOG}

  ERROR=`echo ${RESP} | jq -r '.message?'`

  if [ "" != "$ERROR" ] && [ "null" != "$ERROR" ]; then
    error "Github: $ERROR"
    exit 1
  fi

  echo "$RESP"
}

usage()
{
  cat << USAGE
${PLIZ} is github release made easy. If you embrace semver this is the right tool.

$(ok Usage:)
  ${PLIZ} [scope] [--options]

$(ok Scope:)
  $(info major)  $(comment "Bumps the <major> part of semver.")
  $(info minor)  $(comment "Bumps the <minor> part of semver.")

$(ok Options:)
  $(info "-v --vfile")   $(comment "Forces creation of VERSION file.")
  $(info "-h --help")    $(comment "Show help information and usage.")
  $(info "-u --update")  $(comment "Update ${PLIZ} to latest version.")

$(ok Examples:)
  please
  please --update
  please --vfile
  please minor
  please major --vfile
USAGE
  exit 0
}

if [ -z "${GH_AUTH_TOKEN}" ]; then
  error "GH auth token missing"
  exit 1
fi

REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://;s/.git//'`
GH_REPO="github.com/repos/${REPO}"
ok "Repository ${REPO}"

TMP_LOG=`tempfile -p PLZ`
info "Log file ${TMP_LOG}"

info "Updating master ..."
qgit stash && qgit checkout master && qgit fetch --tags && qgit pull origin master --rebase
ok

info "Getting latest releases ..."
VERSION=`github "https://api.${GH_REPO}/releases?per_page=1" | jq -r '.[0]?.tag_name?'`
DIFF="${VERSION}..HEAD"

if [ "null" == "$VERSION" ]; then
  VERSION="0.0.0"
  DIFF=""
fi
ok

info "Current Version $VERSION"
info "Collecting commits ..."

COMMITS=`git log ${DIFF} --no-merges --oneline --pretty=%B --grep "skip ci" --grep "StyleCI" --invert-grep | sed -e ':a;N;$!ba;s/\n/<br>/g'`
ok

if [ "" == "$COMMITS" ]; then
  error "Nothing to release"
  exit 0
fi

if [[ $* == *major* ]]; then
  NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $((a + 1)).0.0)`
elif [[ $*  == *minor* ]]; then
  NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $a.$((b + 1)).0)`
else
  NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $a.$b.$((c + 1)))`
fi

if [ -f ./VERSION ] || [[ $* == *--vfile* ]]; then
  info "Bumping version ..."
  echo "${NEXT_VERSION}" > ./VERSION
  qgit add ./VERSION && qgit commit -m "chore: bump version [skip ci]" && qgit push origin master
  ok
fi

info "Releasing $NEXT_VERSION ..."

LAST_RELEASE_ID=`github \
  "-H 'Content-Type: application/json' \
  -d '{\"tag_name\":\"${NEXT_VERSION}\",\"name\":\"Version ${NEXT_VERSION}\",\"body\":\"${COMMITS}\"}' \
  https://api.${GH_REPO}/releases" \
    | jq -r '.id?'`
ok

if [ "null" == "$LAST_RELEASE_ID" ]; then
  error "Something went wrong"
  info "Check ${TMP_LOG} for logs"
  exit 1
fi

# no need to publish phar
if [ ! -f ./box.json ]; then
  info "Check ${TMP_LOG} for logs"
  exit 0
fi

if [ ! -f ~/box.phar ]; then
  info "Fetching box.phar ..."
  curl -sSLo ~/box.phar "https://github.com/humbug/box/releases/download/3.0.0-beta.4/box.phar"
fi

info "Cleaning up ..."
rm -rf ./vendor/cov
ok

info "Compiling phar ..."
php ~/box.phar compile >> ${TMP_LOG}
ok

PHAR_FILE=`ls -t $(pwd)/bin/*.phar | head -1`
NAME=`basename ${PHAR_FILE}`
info "Publishing phar ..."

SIZE=`github \
  "-H 'Content-Type: application/octet-stream' \
  --data-binary @${PHAR_FILE} \
  https://uploads.${GH_REPO}/releases/${LAST_RELEASE_ID}/assets?name=${NAME}" \
    | jq -r '.size'`
ok

info "[ok] ${NAME} ${SIZE}bytes"
info "Check ${TMP_LOG} for logs"
