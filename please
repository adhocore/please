#!/usr/bin/env bash
#
# Simple github release for PHP &/or NodeJS projects.
#
# Author:
#   Jitendra Adhikari <jiten.adhikary@gmail.com>
#
# Be sure to check readme doc at https://github.com/adhocore/please
#

set -e

FULL=`readlink -f $0` # fullpath
PLIZ=`basename $0`    # name

line() { echo -e "\e[${3:-0};$2m$1\e[0m"; }

error() { line "$1" 31; }

ok() { line "${1:-  Done}" 32; }

info() { line "$1" 33; }

comment() { line "$1" 30 1; }

qgit() { git "$@" &>> $TMP_LOG; }

# github api
github()
{
  RESP=`bash -c "curl --silent -H 'Authorization: token ${GH_AUTH_TOKEN}' $@"`
  echo "${RESP}" >> ${TMP_LOG}

  ERROR=`echo ${RESP} | jq -r '.message?'`

  if [ "" != "$ERROR" ] && [ "null" != "$ERROR" ]; then
    error "Github: $ERROR"
    exit 1
  fi

  echo "${RESP}"
}

# show usage
usage()
{
  cat << USAGE
${PLIZ} is github release made easy. If you embrace semver this is the right tool.

$(ok Usage:)
  ${PLIZ} [scope] [--options]

$(ok Scope:)
  $(info major)  $(comment "Bumps the <major> part of semver.")
  $(info minor)  $(comment "Bumps the <minor> part of semver.")

$(ok Options:)
  $(info "-c --chlog")     $(comment "Forces creation of CHANGELOG.md file.")
  $(info "-h --help")      $(comment "Show help information and usage.")
  $(info "-H --chash")     $(comment "Prepends commit hash into log.")
  $(info "-o --organize")  $(comment "Commit types as CSV for changelog or release notes.")
                 $(comment "(Default: feat,fix,refactor,perf,docs,infra,chore)")
  $(info "-p --public")    $(comment "Set scoped npm package for public access.")
  $(info "-u --update")    $(comment "Update ${PLIZ} to latest version.")
  $(info "-v --vfile")     $(comment "Forces creation of VERSION file.")
  $(info "-V --version")   $(comment "Forces the exact version to be released.")
  $(info "-y --yes")       $(comment "Assume yes for any confirmation.")

$(ok Examples:)
  please
  please --update
  please --organize feat,fix,docs  # only features, fixes and docs are included
  please --vfile --chash
  please minor --public --yes
  please major --vfile --chlog
  please --vfile --chlog --chash --version 1.5.0
USAGE
  exit 0
}

# organize commits
organize-commits() # $1 = diff_range, $2 = commit_types_csv
{
  declare -A LABELS=(
    [feat]=Features
    [fix]="Bug Fixes"
    [refactor]="Internal Refactors"
    [perf]="Performance Improvements"
    [test]=Tests
    [docs]=Documentations
    [chore]=Miscellaneous
    [style]="Code Standards"
    [infra]="Infrastructure Changes"
  )

  declare -A CHANGELOG

  while read -r COMMIT; do
    if [[ $COMMIT =~ ^([a-z]+)\(?([^\)]+)?\)?:\ (.+) ]]; then
      type="${BASH_REMATCH[1]}" scope="${BASH_REMATCH[2]}" subject="${BASH_REMATCH[3]}"
      if [[ "$scope" != "" ]]; then scope="**${scope^}**: "; fi

      CHANGELOG[$type]="${CHANGELOG[$type]}- ${scope}${subject^}\n"
    fi
  done <<< `git log $1 --no-merges --oneline --pretty="${GCFMT}" --grep "skip ci" --grep "StyleCI" --invert-grep`

  ORGANIZED=""
  TYPES=(`echo ${2:-feat,fix,refactor,perf,docs,infra,chore} | tr ',' '\n'`)

  for TYPE in ${TYPES[@]}; do
    if [[ "${CHANGELOG[$TYPE]}" != "" ]]; then
      ORGANIZED="$ORGANIZED### ${LABELS[$TYPE]}\n${CHANGELOG[$TYPE]}\n"
    fi
  done

  echo $ORGANIZED
}

# update please
update()
{
  info "Updating ${PLIZ} ..."
  curl -sSLo ${FULL} https://raw.githubusercontent.com/adhocore/please/master/please
  NEWVER=`curl -sSL https://raw.githubusercontent.com/adhocore/please/master/VERSION`
  ok "  Done [${NEWVER}]"
  exit 0
}

# get box.phar path
get-box()
{
  case `php -r "echo substr(phpversion(), 0, 3);"` in
    7.2 | 7.3 | 7.4) BOX_VER=3.8.0 ;;
    7.1) BOX_VER=3.7.0 ;;
    7.0 | 5.6 | 5.5 | 5.4 | 5.3) BOX_VER=2.7.5 ;;
    *) echo "Can't determine box.phar version"; exit 1 ;;
  esac

  if [ ! -e ~/box.$BOX_VER.phar ]; then
    if [ "$BOX_VER" == "2.7.5" ]; then
      curl -sSLo ~/box.$BOX_VER.phar "https://github.com/box-project/box2/releases/download/2.7.5/box-2.7.5.phar" >> $TMP_LOG
    else
      curl -sSLo ~/box.$BOX_VER.phar "https://github.com/humbug/box/releases/download/$BOX_VER/box.phar" >> $TMP_LOG
    fi
  fi

  echo `realpath ~/box.$BOX_VER.phar`
}

# publish phar
publish-phar()
{
  PBIN=`cat composer.json | jq -r '.bin[0]?'`
  if [ "null" == "$PBIN" ]; then
    error "Check bin value in composer.json"
    info "Check ${TMP_LOG} for logs"
    exit 1
  fi

  info "Cleaning up ..."
  rm -rf ./vendor/cov
  ok

  info "Compiling phar ..."
  php `get-box` compile >> ${TMP_LOG}
  ok

  PHAR_FILE=`realpath ${PBIN}.phar`
  NAME=`basename ${PHAR_FILE}`
  info "Publishing phar ..."

  SIZE=`github \
    "-H 'Content-Type: application/octet-stream' \
    --data-binary @${PHAR_FILE} \
    https://uploads.${GH_REPO}/releases/${LAST_RELEASE_ID}/assets?name=${NAME}" \
      | jq -r '.size'`
  ok

  info "[OK] ${NAME} ${SIZE} bytes"
}

# publish npm
publish-npm()
{
  PKG=`cat ./package.json`
  PVT=`echo ${PKG} | jq -r '.private?'`

  info "Publishing npm ..."
  echo ${PKG} | jq ".version = \"${NEXT_VERSION}\"" > ./package.json
  qgit add ./package.json && GPUSH=1

  if [ "true" == "$PVT" ]; then
    info "  package marked private"
    return 0
  elif [ ! -f ~/.npmrc ]; then
    npm adduser
  elif [[ "" = "$(cat ~/.npmrc | grep _authToken || echo '')" ]]; then
    npm adduser
  fi

  npm publish ${PUBLIC} &>> ${TMP_LOG}
  ok
}

GCFMT="%s (%an)"    # git commit log format
REPO=`git config --get remote.origin.url | sed -e 's/git@github.com://;s/https:\/\/github.com\///;s/.git//'`

# argv parsing
while [[ $# -gt 0 ]]
do
  case "$1" in
    -h | --help) usage ;;
    -u | --update) update ;;
    -v | --vfile) VFILE=1; shift 1 ;;
    -p | --public) PUBLIC="--access=public"; shift 1 ;;
    -c | --chlog) CHLOG=1; shift 1 ;;
    -H | --chash) GCFMT="${GCFMT} [_%h_](https://github.com/${REPO}/commit/%h)"; shift 1 ;;
    -y | --yes) YES=1; shift 1 ;;
    -V | --version) NEXT_VERSION=$2; shift 2 ;;
    -o | --organize) TYPES=$2; shift 2 ;;
    minor) MINOR=1; shift 1 ;;
    major) MAJOR=1; shift 1 ;;
    *) error "Invalid arg ${1}. (Run ${PLIZ} --help)"; exit 1 ;;
  esac
done

if [ "" == "$REPO" ]; then
  error "$(pwd) is not git repo"
  exit 1
fi

GPUSH=0             # git push pending
MAJOR=${MAJOR:-0}   # bump major
MINOR=${MINOR:-0}   # bump minor
VFILE=${VFILE:-0}   # create version file
CHLOG=${CHLOG:-0}   # create changelog file
YES=${YES:-0}       # assume yes

# gh auth
if [ -z "${GH_AUTH_TOKEN}" ]; then
  error "GH_AUTH_TOKEN missing"
  exit 1
fi

GH_REPO="github.com/repos/${REPO}"
ok "Repository ${REPO}"

TMP_LOG=`tempfile -p PLZ`
info "Log file ${TMP_LOG}"

DEPLOY_BRANCH="${DEPLOY_BRANCH:-master}"
if [ -z "$TRAVIS" ] || [ "$DEPLOY_BRANCH" == "$TRAVIS_BRANCH" ]; then
  info "Updating $DEPLOY_BRANCH ..."
  qgit stash && qgit checkout $DEPLOY_BRANCH && qgit fetch --tags && qgit pull origin $DEPLOY_BRANCH --rebase
  ok
else
  info "Skip release"
  exit 0
fi

info "Getting latest releases ..."
VERSION=`github "https://api.${GH_REPO}/releases?per_page=1" | jq -r '.[0]?.tag_name?'`
RANGE="${VERSION}..HEAD"

if [ "null" == "$VERSION" ]; then
  VERSION="0.0.0"
  RANGE=""
fi
ok "  Done [${VERSION}]"

info "Collecting commits ..."
COMMITS=`organize-commits "$RANGE" "$TYPES"`
ok

if [ "" == "$COMMITS" ]; then
  error "Nothing to release"
  exit 0
fi

echo $COMMITS >> $TMP_LOG

# determine next version
info "Bumping version ..."
if [[ "" = "$NEXT_VERSION" ]]; then
  FEAT=`git log ${DIFF} --oneline --pretty="%s" | grep -P '^feat' || echo ""`
  if [[ $MAJOR -eq 1 ]]; then
    V=""
    if [[ $VERSION == v* ]]; then
      V="v"
      VERSION="${VERSION//v/}"
    fi
    NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $V$((a + 1)).0.0)`
  elif [[ $MINOR -eq 1 ]]; then
    NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $a.$((b + 1)).0)`
  elif [[ "" != "$FEAT" ]]; then
    NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $a.$((b + 1)).0)`
  else
    NEXT_VERSION=`echo $VERSION | (IFS=".$IFS"; read a b c && echo $a.$b.$((c + 1)))`
  fi
fi
ok "  Done [${NEXT_VERSION}]"

if [[ $YES -eq 0 ]]; then
  read -p "Are you sure to release [${NEXT_VERSION}]? [y/N] " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    error "Not releasing ${NEXT_VERSION}"
    exit 1
  fi
fi

# changelog backup
OLD=""
if [ -f ./CHANGELOG.md ]; then
  OLD="\n$(cat ./CHANGELOG.md)"
  CHLOG=0

  if [[ $OLD != *"[${NEXT_VERSION}]"* ]]; then
    CHLOG=1
  fi
fi

# changelog file
if [[ $CHLOG -eq 1 ]]; then
  info "Updating changelog ..."
  echo -e "## [${NEXT_VERSION}](https://github.com/$REPO/releases/tag/$NEXT_VERSION) ($(date -u '+%Y-%m-%d'))\n\n${COMMITS}${OLD}" > ./CHANGELOG.md
  qgit add ./CHANGELOG.md && GPUSH=1
  ok
fi

# version file
if [ -f ./VERSION ] || [[ $VFILE -eq 1 ]]; then
  echo "${NEXT_VERSION}" > ./VERSION
  qgit add ./VERSION && GPUSH=1
fi

# do we need to publish npm?
if [ -f ./package.json ]; then
  publish-npm
fi

# push changes
if [[ $GPUSH -eq 1 ]]; then
  qgit commit -m "chore: bump version, update changelog [skip ci]"
  info "Pushing pending commits ..."
  qgit push origin $DEPLOY_BRANCH
  ok
fi

# release
info "Releasing $NEXT_VERSION ..."
COMMITS=`printf %s "$COMMITS"`
LAST_RELEASE_ID=`curl --silent -H "Authorization: token ${GH_AUTH_TOKEN}" \
  -H 'Content-Type: application/json' \
  -d "{\"tag_name\":\"${NEXT_VERSION}\",\"name\":\"Version ${NEXT_VERSION}\",\"body\":\"$COMMITS\"}" \
  https://api.${GH_REPO}/releases \
    | jq -r '.id?'`
ok "  Done (https://github.com/$REPO/releases/tag/$NEXT_VERSION)"

if [ "null" == "${LAST_RELEASE_ID:-null}" ]; then
  error "Something went wrong"
  info "Check ${TMP_LOG} for logs"
  exit 1
fi

# do we need to publish phar?
if [ -f ./box.json ] && [ -f ./composer.json ]; then
  publish-phar
fi

info "Check ${TMP_LOG} for logs"
